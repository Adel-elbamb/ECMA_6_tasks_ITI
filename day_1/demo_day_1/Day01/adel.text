 var 
 
 * == can reassign with different datatypes
 * == can redeclare
 * == Hoisting 
 * == add to window object
 * == function scope

 ======================================
 * let
 * -----------------------
 *  == can reassign with different datatypes
 *  == can not redeclare
 *  == can't be Hoisted
    == not added to window object
    == block scope

===================================
 * const
 * -----------------------
 *  == can not reassign with different datatypes
 *  == can not redeclare
 *  == can't be Hoisted
    == not added to window object
    == block scope
can redeclare
var x = 2
var x = 6
=---------------------------------------
Hoisting
console.log(x) ===>undefind 
var x = aaaaa
=----------------------------
add to window object
console.log(window.x) ====> window is defult and is the optinal 
'=======------------------
function scope ====> دى معناها ان لو انا عندى فار بتكون على مستو ال فانكشن 
================--------------------
===================
const  
// const arr = [];
// arr.push("ali");

// arr = []; // change address in memory
// console.log(arr);

=================-------------------
destracting 
// let arr = [10, 20, 30, 40];

// let [x, y] = ["mona", "ahmed", "pet"];
// destructuring
// let x = arr[0];
// let y = arr[1];

let arr = [10, 20, 30, 40];
let [, , z] = arr;
// console.log(y);
console.log(z);

===================
destracting using use state 
// function useState(data) {
// 	return [
// 		data,
// 		function () {
// 			console.log("hello os");
// 		},
// 		30,
// 	];
// }

// let [x, y] = useState(0);

// y();

======================
destracting for object 
// let person = { fname: "ali", age: 20, color: "red", products: ["book", "pen"] };

// // let x = person.fname;

// // let y = person.color;
// let { fname: fname, color: color } = person;  === // let { fname, color, products } = person;  

// console.log(fname); ==>retuen value in object
// console.log(color);==> return value in object 
=================================--------------
-- spread operator
   // let arr1 = ["mona", "ahmed", "ali", "Alaa"];
// let arr2 = [1, 2, 3, ...arr1, "OS"];

// arr1.push("hend");
// console.log("arr1 : ", arr1);  ====> return arr1 
// console.log("arr2 : ", arr2); ==> [1, 2, 3, "mona", "ahmed", "ali", "Alaa", "OS"]


=========================----------------------------
rest params
   => when call function have more one pramters of 
   function sum (x,y,...x) {
    console.log(x,y)

   }
    
  sum(12,13,0,1,2,3) => ...x = 0,1,2,3 
  =======================------------------------
  arrow funcation 
  // let sum = (x = 0, y = 0) => {
// 	return x + y;
// };

====---------------------
// this
 this == caller 
// call bind apply
// var fname = "ahmed";

// function getName() {
// 	console.log(this.fname); caller is window 
// }

// var person = {
// 	fname: "Ali",
// 	display: function () {
// 		console.log(this); // person
// 		getName(); // caller window
// 	},
// };

// person.display(); // person

// that == if you have a caller defferant window and you to be the caller is window make at that = window and make the calling using that

// this -- window
// var fname = "ahmed";

// function getName() {
// 	console.log(this.fname);
// }

// var person = {
// 	fname: "Ali",
// 	display: () => {
// 		console.log(this); // window
// 		setTimeout(() => {
// 			console.log(this.fname);
// 		}, 2000); // window
// 	},
// };

// person.display(); // person
